{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst db = require('../db');\nconst auth = require('../middleware/auth');\n\n// GET all lectures\nrouter.get('/', auth(), (req, res) => {\n  const sql = `\n    SELECT l.*, c.name AS course_name\n    FROM lectures l\n    LEFT JOIN courses c ON l.course_id = c.id\n  `;\n  db.query(sql, (err, results) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error'\n    });\n    res.json(results);\n  });\n});\n\n// GET all available reports\nrouter.get('/available-reports', auth(), (req, res) => {\n  const sql = `\n    SELECT r.id, c.name AS course_name, c.code AS course_code, r.lecturer_id, r.date_of_lecture\n    FROM reports r\n    LEFT JOIN courses c ON r.course_code = c.code\n    ORDER BY r.id DESC\n  `;\n  db.query(sql, (err, results) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error'\n    });\n    res.json(results);\n  });\n});\n\n// POST a lecture\nrouter.post('/', auth(), (req, res) => {\n  if (req.user.role !== 'pl') return res.status(403).json({\n    msg: 'Access denied'\n  });\n  const {\n    report_id\n  } = req.body;\n  if (!report_id) return res.status(400).json({\n    msg: 'Select a lecture from reports'\n  });\n  const sql = `\n    INSERT INTO lectures (course_id, lecturer_id, date_of_lecture)\n    SELECT c.id, r.lecturer_id, r.date_of_lecture\n    FROM reports r\n    JOIN courses c ON r.course_code = c.code\n    WHERE r.id = ?\n  `;\n  db.query(sql, [report_id], (err, result) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error',\n      err\n    });\n    if (result.affectedRows === 0) return res.status(404).json({\n      msg: 'Report not found or course missing'\n    });\n    res.json({\n      msg: 'Lecture assigned successfully!'\n    });\n  });\n});\n\n// DELETE a lecture\nrouter.delete('/:id', auth(), (req, res) => {\n  if (req.user.role !== 'pl') return res.status(403).json({\n    msg: 'Access denied'\n  });\n  const sql = `DELETE FROM lectures WHERE id = ?`;\n  db.query(sql, [req.params.id], (err, result) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error'\n    });\n    if (result.affectedRows === 0) return res.status(404).json({\n      msg: 'Lecture not found'\n    });\n    res.json({\n      msg: 'Lecture deleted successfully!'\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","auth","get","req","res","sql","query","err","results","status","json","msg","post","user","role","report_id","body","result","affectedRows","delete","params","id","module","exports"],"sources":["C:/Users/Tech Semiconductors/luct-reporting-system/frontend/src/components/Lectures.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../db');\r\nconst auth = require('../middleware/auth');\r\n\r\n// GET all lectures\r\nrouter.get('/', auth(), (req, res) => {\r\n  const sql = `\r\n    SELECT l.*, c.name AS course_name\r\n    FROM lectures l\r\n    LEFT JOIN courses c ON l.course_id = c.id\r\n  `;\r\n  db.query(sql, (err, results) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error' });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// GET all available reports\r\nrouter.get('/available-reports', auth(), (req, res) => {\r\n  const sql = `\r\n    SELECT r.id, c.name AS course_name, c.code AS course_code, r.lecturer_id, r.date_of_lecture\r\n    FROM reports r\r\n    LEFT JOIN courses c ON r.course_code = c.code\r\n    ORDER BY r.id DESC\r\n  `;\r\n  db.query(sql, (err, results) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error' });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// POST a lecture\r\nrouter.post('/', auth(), (req, res) => {\r\n  if (req.user.role !== 'pl') return res.status(403).json({ msg: 'Access denied' });\r\n  const { report_id } = req.body;\r\n  if (!report_id) return res.status(400).json({ msg: 'Select a lecture from reports' });\r\n\r\n  const sql = `\r\n    INSERT INTO lectures (course_id, lecturer_id, date_of_lecture)\r\n    SELECT c.id, r.lecturer_id, r.date_of_lecture\r\n    FROM reports r\r\n    JOIN courses c ON r.course_code = c.code\r\n    WHERE r.id = ?\r\n  `;\r\n  db.query(sql, [report_id], (err, result) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error', err });\r\n    if (result.affectedRows === 0) return res.status(404).json({ msg: 'Report not found or course missing' });\r\n    res.json({ msg: 'Lecture assigned successfully!' });\r\n  });\r\n});\r\n\r\n// DELETE a lecture\r\nrouter.delete('/:id', auth(), (req, res) => {\r\n  if (req.user.role !== 'pl') return res.status(403).json({ msg: 'Access denied' });\r\n  const sql = `DELETE FROM lectures WHERE id = ?`;\r\n  db.query(sql, [req.params.id], (err, result) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error' });\r\n    if (result.affectedRows === 0) return res.status(404).json({ msg: 'Lecture not found' });\r\n    res.json({ msg: 'Lecture deleted successfully!' });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
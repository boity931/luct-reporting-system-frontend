{"ast":null,"code":"const express = require('express');\nconst db = require('../db');\nconst auth = require('../middleware/auth');\nconst router = express.Router();\n\n// GET /api/classes\n// List classes with optional search\nrouter.get('/', auth(['lecturer', 'prl', 'pl']), (req, res) => {\n  const rawSearch = req.query.q || '';\n  const search = `%${rawSearch}%`;\n  const sql = `\n    SELECT * FROM classes\n    WHERE class_name LIKE ?\n  `;\n  db.query(sql, [search], (err, results) => {\n    if (err) {\n      console.error('❌ Database error:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err.message\n      });\n    }\n    res.json(results);\n  });\n});\n\n// PUT /api/classes/:id\n// Update a class (lecturer only)\nrouter.put('/:id', auth(['lecturer']), (req, res) => {\n  const classId = req.params.id;\n  const {\n    class_name,\n    venue\n  } = req.body;\n\n  // Log received data for debugging\n  console.log('Received update data for class ID:', classId, req.body);\n\n  // Basic validation\n  if (!class_name || !venue) {\n    return res.status(400).json({\n      message: `Missing required fields: ${!class_name ? 'class_name' : ''}${!class_name && !venue ? ', ' : ''}${!venue ? 'venue' : ''}`\n    });\n  }\n  db.beginTransaction(err => {\n    if (err) {\n      console.error('❌ Transaction error:', err);\n      return res.status(500).json({\n        message: 'Error starting transaction'\n      });\n    }\n\n    // Verify the class exists\n    db.query('SELECT class_id FROM classes WHERE class_id = ?', [classId], (err, results) => {\n      if (err) {\n        return db.rollback(() => {\n          console.error('❌ Database error:', err);\n          res.status(500).json({\n            message: 'Error checking class: ' + err.message\n          });\n        });\n      }\n      if (results.length === 0) {\n        return db.rollback(() => {\n          res.status(404).json({\n            message: 'Class not found'\n          });\n        });\n      }\n\n      // Update the class\n      db.query('UPDATE classes SET class_name = ?, venue = ? WHERE class_id = ?', [class_name, venue, classId], err => {\n        if (err) {\n          return db.rollback(() => {\n            console.error('❌ Database error:', err);\n            res.status(500).json({\n              message: 'Error updating class: ' + err.message\n            });\n          });\n        }\n        db.commit(err => {\n          if (err) {\n            return db.rollback(() => {\n              console.error('❌ Transaction error:', err);\n              res.status(500).json({\n                message: 'Error committing transaction: ' + err.message\n              });\n            });\n          }\n          res.json({\n            message: 'Class updated successfully'\n          });\n        });\n      });\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","db","auth","router","Router","get","req","res","rawSearch","query","q","search","sql","err","results","console","error","status","json","message","put","classId","params","id","class_name","venue","body","log","beginTransaction","rollback","length","commit","module","exports"],"sources":["C:/Users/Tech Semiconductors/luct-reporting-system/frontend/src/components/Classes.js"],"sourcesContent":["const express = require('express');\r\nconst db = require('../db');\r\nconst auth = require('../middleware/auth');\r\n\r\nconst router = express.Router();\r\n\r\n// GET /api/classes\r\n// List classes with optional search\r\nrouter.get('/', auth(['lecturer', 'prl', 'pl']), (req, res) => {\r\n  const rawSearch = req.query.q || '';\r\n  const search = `%${rawSearch}%`;\r\n\r\n  const sql = `\r\n    SELECT * FROM classes\r\n    WHERE class_name LIKE ?\r\n  `;\r\n\r\n  db.query(sql, [search], (err, results) => {\r\n    if (err) {\r\n      console.error('❌ Database error:', err);\r\n      return res.status(500).json({\r\n        message: 'Database error',\r\n        error: err.message,\r\n      });\r\n    }\r\n\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// PUT /api/classes/:id\r\n// Update a class (lecturer only)\r\nrouter.put('/:id', auth(['lecturer']), (req, res) => {\r\n  const classId = req.params.id;\r\n  const { class_name, venue } = req.body;\r\n\r\n  // Log received data for debugging\r\n  console.log('Received update data for class ID:', classId, req.body);\r\n\r\n  // Basic validation\r\n  if (!class_name || !venue) {\r\n    return res.status(400).json({\r\n      message: `Missing required fields: ${!class_name ? 'class_name' : ''}${\r\n        !class_name && !venue ? ', ' : ''\r\n      }${!venue ? 'venue' : ''}`,\r\n    });\r\n  }\r\n\r\n  db.beginTransaction((err) => {\r\n    if (err) {\r\n      console.error('❌ Transaction error:', err);\r\n      return res.status(500).json({ message: 'Error starting transaction' });\r\n    }\r\n\r\n    // Verify the class exists\r\n    db.query(\r\n      'SELECT class_id FROM classes WHERE class_id = ?',\r\n      [classId],\r\n      (err, results) => {\r\n        if (err) {\r\n          return db.rollback(() => {\r\n            console.error('❌ Database error:', err);\r\n            res.status(500).json({ message: 'Error checking class: ' + err.message });\r\n          });\r\n        }\r\n        if (results.length === 0) {\r\n          return db.rollback(() => {\r\n            res.status(404).json({ message: 'Class not found' });\r\n          });\r\n        }\r\n\r\n        // Update the class\r\n        db.query(\r\n          'UPDATE classes SET class_name = ?, venue = ? WHERE class_id = ?',\r\n          [class_name, venue, classId],\r\n          (err) => {\r\n            if (err) {\r\n              return db.rollback(() => {\r\n                console.error('❌ Database error:', err);\r\n                res.status(500).json({ message: 'Error updating class: ' + err.message });\r\n              });\r\n            }\r\n\r\n            db.commit((err) => {\r\n              if (err) {\r\n                return db.rollback(() => {\r\n                  console.error('❌ Transaction error:', err);\r\n                  res.status(500).json({\r\n                    message: 'Error committing transaction: ' + err.message,\r\n                  });\r\n                });\r\n              }\r\n              res.json({ message: 'Class updated successfully' });\r\n            });\r\n          }\r\n        );\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
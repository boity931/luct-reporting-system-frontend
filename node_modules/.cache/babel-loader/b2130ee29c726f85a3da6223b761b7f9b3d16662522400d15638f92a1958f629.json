{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst db = require('../db');\nconst auth = require('../middleware/auth');\n\n// -------------------\n// GET all lectures\nrouter.get('/', auth(), (req, res) => {\n  const sql = `\n    SELECT l.*, c.name AS course_name, u.username AS lecturer_name\n    FROM lectures l\n    LEFT JOIN courses c ON l.course_id = c.id\n    LEFT JOIN users u ON l.lecturer_id = u.id\n    ORDER BY l.id DESC\n  `;\n  db.query(sql, (err, results) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error',\n      err\n    });\n    res.json(results);\n  });\n});\n\n// -------------------\n// GET available reports for PL to assign lectures\nrouter.get('/available-reports', auth(), (req, res) => {\n  const sql = `\n    SELECT id, course_name, course_code, lecturer_id, date_of_lecture\n    FROM reports\n    ORDER BY id DESC\n  `;\n  db.query(sql, (err, results) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error',\n      err\n    });\n    res.json(results);\n  });\n});\n\n// -------------------\n// POST a lecture (assign) by selecting a report\nrouter.post('/', auth(), (req, res) => {\n  if (req.user.role !== 'pl') {\n    return res.status(403).json({\n      msg: 'Access denied'\n    });\n  }\n  const {\n    report_id\n  } = req.body;\n  if (!report_id) return res.status(400).json({\n    msg: 'Report must be selected'\n  });\n\n  // Get report details\n  const reportSql = `SELECT * FROM reports WHERE id = ?`;\n  db.query(reportSql, [report_id], (err, reports) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error',\n      err\n    });\n    if (reports.length === 0) return res.status(404).json({\n      msg: 'Report not found'\n    });\n    const report = reports[0];\n\n    // Check if course exists, insert if not\n    const courseSql = `SELECT id FROM courses WHERE name = ? LIMIT 1`;\n    db.query(courseSql, [report.course_name], (err, courses) => {\n      if (err) return res.status(500).json({\n        msg: 'DB error',\n        err\n      });\n      let courseIdPromise;\n      if (courses.length > 0) {\n        // Course exists\n        courseIdPromise = Promise.resolve(courses[0].id);\n      } else {\n        // Insert new course\n        const insertCourseSql = `INSERT INTO courses (name) VALUES (?)`;\n        courseIdPromise = new Promise((resolve, reject) => {\n          db.query(insertCourseSql, [report.course_name], (err, result) => {\n            if (err) return reject(err);\n            resolve(result.insertId);\n          });\n        });\n      }\n      courseIdPromise.then(course_id => {\n        // Insert lecture\n        const insertLectureSql = `\n            INSERT INTO lectures (course_id, lecturer_id, date_of_lecture)\n            VALUES (?, ?, ?)\n          `;\n        db.query(insertLectureSql, [course_id, report.lecturer_id, report.date_of_lecture || null], (err, result) => {\n          if (err) return res.status(500).json({\n            msg: 'DB error',\n            err\n          });\n          res.json({\n            msg: 'Lecture assigned successfully!'\n          });\n        });\n      }).catch(err => res.status(500).json({\n        msg: 'DB error',\n        err\n      }));\n    });\n  });\n});\n\n// -------------------\n// DELETE a lecture\nrouter.delete('/:id', auth(), (req, res) => {\n  if (req.user.role !== 'pl') {\n    return res.status(403).json({\n      msg: 'Access denied'\n    });\n  }\n  const lectureId = req.params.id;\n  const sql = `DELETE FROM lectures WHERE id = ?`;\n  db.query(sql, [lectureId], (err, result) => {\n    if (err) return res.status(500).json({\n      msg: 'DB error',\n      err\n    });\n    if (result.affectedRows === 0) return res.status(404).json({\n      msg: 'Lecture not found'\n    });\n    res.json({\n      msg: 'Lecture deleted successfully!'\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","auth","get","req","res","sql","query","err","results","status","json","msg","post","user","role","report_id","body","reportSql","reports","length","report","courseSql","course_name","courses","courseIdPromise","Promise","resolve","id","insertCourseSql","reject","result","insertId","then","course_id","insertLectureSql","lecturer_id","date_of_lecture","catch","delete","lectureId","params","affectedRows","module","exports"],"sources":["C:/Users/Tech Semiconductors/luct-reporting-system/frontend/src/components/Lectures.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../db');\r\nconst auth = require('../middleware/auth');\r\n\r\n// -------------------\r\n// GET all lectures\r\nrouter.get('/', auth(), (req, res) => {\r\n  const sql = `\r\n    SELECT l.*, c.name AS course_name, u.username AS lecturer_name\r\n    FROM lectures l\r\n    LEFT JOIN courses c ON l.course_id = c.id\r\n    LEFT JOIN users u ON l.lecturer_id = u.id\r\n    ORDER BY l.id DESC\r\n  `;\r\n  db.query(sql, (err, results) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error', err });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// -------------------\r\n// GET available reports for PL to assign lectures\r\nrouter.get('/available-reports', auth(), (req, res) => {\r\n  const sql = `\r\n    SELECT id, course_name, course_code, lecturer_id, date_of_lecture\r\n    FROM reports\r\n    ORDER BY id DESC\r\n  `;\r\n  db.query(sql, (err, results) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error', err });\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// -------------------\r\n// POST a lecture (assign) by selecting a report\r\nrouter.post('/', auth(), (req, res) => {\r\n  if (req.user.role !== 'pl') {\r\n    return res.status(403).json({ msg: 'Access denied' });\r\n  }\r\n\r\n  const { report_id } = req.body;\r\n  if (!report_id) return res.status(400).json({ msg: 'Report must be selected' });\r\n\r\n  // Get report details\r\n  const reportSql = `SELECT * FROM reports WHERE id = ?`;\r\n  db.query(reportSql, [report_id], (err, reports) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error', err });\r\n    if (reports.length === 0) return res.status(404).json({ msg: 'Report not found' });\r\n\r\n    const report = reports[0];\r\n\r\n    // Check if course exists, insert if not\r\n    const courseSql = `SELECT id FROM courses WHERE name = ? LIMIT 1`;\r\n    db.query(courseSql, [report.course_name], (err, courses) => {\r\n      if (err) return res.status(500).json({ msg: 'DB error', err });\r\n\r\n      let courseIdPromise;\r\n      if (courses.length > 0) {\r\n        // Course exists\r\n        courseIdPromise = Promise.resolve(courses[0].id);\r\n      } else {\r\n        // Insert new course\r\n        const insertCourseSql = `INSERT INTO courses (name) VALUES (?)`;\r\n        courseIdPromise = new Promise((resolve, reject) => {\r\n          db.query(insertCourseSql, [report.course_name], (err, result) => {\r\n            if (err) return reject(err);\r\n            resolve(result.insertId);\r\n          });\r\n        });\r\n      }\r\n\r\n      courseIdPromise\r\n        .then(course_id => {\r\n          // Insert lecture\r\n          const insertLectureSql = `\r\n            INSERT INTO lectures (course_id, lecturer_id, date_of_lecture)\r\n            VALUES (?, ?, ?)\r\n          `;\r\n          db.query(\r\n            insertLectureSql,\r\n            [course_id, report.lecturer_id, report.date_of_lecture || null],\r\n            (err, result) => {\r\n              if (err) return res.status(500).json({ msg: 'DB error', err });\r\n              res.json({ msg: 'Lecture assigned successfully!' });\r\n            }\r\n          );\r\n        })\r\n        .catch(err => res.status(500).json({ msg: 'DB error', err }));\r\n    });\r\n  });\r\n});\r\n\r\n// -------------------\r\n// DELETE a lecture\r\nrouter.delete('/:id', auth(), (req, res) => {\r\n  if (req.user.role !== 'pl') {\r\n    return res.status(403).json({ msg: 'Access denied' });\r\n  }\r\n\r\n  const lectureId = req.params.id;\r\n  const sql = `DELETE FROM lectures WHERE id = ?`;\r\n  db.query(sql, [lectureId], (err, result) => {\r\n    if (err) return res.status(500).json({ msg: 'DB error', err });\r\n    if (result.affectedRows === 0) return res.status(404).json({ msg: 'Lecture not found' });\r\n    res.json({ msg: 'Lecture deleted successfully!' });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// routes/reports.js\nconst express = require('express');\nconst router = express.Router();\nconst db = require('../db'); // your MySQL connection\nconst authMiddleware = require('../middleware/auth');\n\n// GET all reports\nrouter.get('/', authMiddleware(['lecturer', 'pl', 'prl']), (req, res) => {\n  db.query('SELECT * FROM reports ORDER BY id DESC', (err, results) => {\n    if (err) {\n      console.error('Database fetch error:', err);\n      return res.status(500).json({\n        msg: 'Database fetch failed',\n        error: err.message\n      });\n    }\n    res.json(results);\n  });\n});\n\n// POST create a new report\nrouter.post('/', authMiddleware(['lecturer']), (req, res) => {\n  const reportData = req.body;\n\n  // Ensure user is valid\n  if (!req.user || !req.user.id) {\n    return res.status(401).json({\n      msg: 'Invalid user session'\n    });\n  }\n\n  // Map frontend data to database columns\n  const dbData = {\n    lecturer_id: req.user.id,\n    faculty_name: reportData.faculty_name,\n    class_name: reportData.class_name,\n    week_of_reporting: parseInt(reportData.week_of_reporting) || 0,\n    date_of_lecture: reportData.date_of_lecture,\n    // should be 'YYYY-MM-DD'\n    course_name: reportData.course_name,\n    course_code: reportData.course_code,\n    lecturer_name: reportData.lecturer_name,\n    actual_number_of_students_present: parseInt(reportData.actual_number_of_students_present) || 0,\n    total_number_of_registered_students: parseInt(reportData.total_number_of_registered_students) || 0,\n    venue: reportData.venue,\n    scheduled_lecture_time: reportData.scheduled_lecture_time,\n    topic_taught: reportData.topic_taught,\n    learning_outcomes: reportData.learning_outcomes,\n    recommendations: reportData.recommendations\n  };\n  db.query('INSERT INTO reports SET ?', dbData, (err, result) => {\n    if (err) {\n      console.error('Database insert error:', err);\n      return res.status(500).json({\n        msg: 'Database insert failed',\n        error: err.message\n      });\n    }\n    res.status(201).json({\n      msg: 'Report created',\n      id: result.insertId\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","authMiddleware","get","req","res","query","err","results","console","error","status","json","msg","message","post","reportData","body","user","id","dbData","lecturer_id","faculty_name","class_name","week_of_reporting","parseInt","date_of_lecture","course_name","course_code","lecturer_name","actual_number_of_students_present","total_number_of_registered_students","venue","scheduled_lecture_time","topic_taught","learning_outcomes","recommendations","result","insertId","module","exports"],"sources":["C:/Users/Tech Semiconductors/luct-reporting-system/frontend/src/components/Reports.js"],"sourcesContent":["// routes/reports.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../db'); // your MySQL connection\r\nconst authMiddleware = require('../middleware/auth');\r\n\r\n// GET all reports\r\nrouter.get('/', authMiddleware(['lecturer', 'pl', 'prl']), (req, res) => {\r\n  db.query('SELECT * FROM reports ORDER BY id DESC', (err, results) => {\r\n    if (err) {\r\n      console.error('Database fetch error:', err);\r\n      return res.status(500).json({ msg: 'Database fetch failed', error: err.message });\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// POST create a new report\r\nrouter.post('/', authMiddleware(['lecturer']), (req, res) => {\r\n  const reportData = req.body;\r\n\r\n  // Ensure user is valid\r\n  if (!req.user || !req.user.id) {\r\n    return res.status(401).json({ msg: 'Invalid user session' });\r\n  }\r\n\r\n  // Map frontend data to database columns\r\n  const dbData = {\r\n    lecturer_id: req.user.id,\r\n    faculty_name: reportData.faculty_name,\r\n    class_name: reportData.class_name,\r\n    week_of_reporting: parseInt(reportData.week_of_reporting) || 0,\r\n    date_of_lecture: reportData.date_of_lecture, // should be 'YYYY-MM-DD'\r\n    course_name: reportData.course_name,\r\n    course_code: reportData.course_code,\r\n    lecturer_name: reportData.lecturer_name,\r\n    actual_number_of_students_present: parseInt(reportData.actual_number_of_students_present) || 0,\r\n    total_number_of_registered_students: parseInt(reportData.total_number_of_registered_students) || 0,\r\n    venue: reportData.venue,\r\n    scheduled_lecture_time: reportData.scheduled_lecture_time,\r\n    topic_taught: reportData.topic_taught,\r\n    learning_outcomes: reportData.learning_outcomes,\r\n    recommendations: reportData.recommendations\r\n  };\r\n\r\n  db.query('INSERT INTO reports SET ?', dbData, (err, result) => {\r\n    if (err) {\r\n      console.error('Database insert error:', err);\r\n      return res.status(500).json({ msg: 'Database insert failed', error: err.message });\r\n    }\r\n    res.status(201).json({ msg: 'Report created', id: result.insertId });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7B,MAAMI,cAAc,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;;AAEpD;AACAC,MAAM,CAACI,GAAG,CAAC,GAAG,EAAED,cAAc,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAACE,GAAG,EAAEC,GAAG,KAAK;EACvEJ,EAAE,CAACK,KAAK,CAAC,wCAAwC,EAAE,CAACC,GAAG,EAAEC,OAAO,KAAK;IACnE,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEH,GAAG,CAAC;MAC3C,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,GAAG,EAAE,uBAAuB;QAAEH,KAAK,EAAEH,GAAG,CAACO;MAAQ,CAAC,CAAC;IACnF;IACAT,GAAG,CAACO,IAAI,CAACJ,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAT,MAAM,CAACgB,IAAI,CAAC,GAAG,EAAEb,cAAc,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAACE,GAAG,EAAEC,GAAG,KAAK;EAC3D,MAAMW,UAAU,GAAGZ,GAAG,CAACa,IAAI;;EAE3B;EACA,IAAI,CAACb,GAAG,CAACc,IAAI,IAAI,CAACd,GAAG,CAACc,IAAI,CAACC,EAAE,EAAE;IAC7B,OAAOd,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,GAAG,EAAE;IAAuB,CAAC,CAAC;EAC9D;;EAEA;EACA,MAAMO,MAAM,GAAG;IACbC,WAAW,EAAEjB,GAAG,CAACc,IAAI,CAACC,EAAE;IACxBG,YAAY,EAAEN,UAAU,CAACM,YAAY;IACrCC,UAAU,EAAEP,UAAU,CAACO,UAAU;IACjCC,iBAAiB,EAAEC,QAAQ,CAACT,UAAU,CAACQ,iBAAiB,CAAC,IAAI,CAAC;IAC9DE,eAAe,EAAEV,UAAU,CAACU,eAAe;IAAE;IAC7CC,WAAW,EAAEX,UAAU,CAACW,WAAW;IACnCC,WAAW,EAAEZ,UAAU,CAACY,WAAW;IACnCC,aAAa,EAAEb,UAAU,CAACa,aAAa;IACvCC,iCAAiC,EAAEL,QAAQ,CAACT,UAAU,CAACc,iCAAiC,CAAC,IAAI,CAAC;IAC9FC,mCAAmC,EAAEN,QAAQ,CAACT,UAAU,CAACe,mCAAmC,CAAC,IAAI,CAAC;IAClGC,KAAK,EAAEhB,UAAU,CAACgB,KAAK;IACvBC,sBAAsB,EAAEjB,UAAU,CAACiB,sBAAsB;IACzDC,YAAY,EAAElB,UAAU,CAACkB,YAAY;IACrCC,iBAAiB,EAAEnB,UAAU,CAACmB,iBAAiB;IAC/CC,eAAe,EAAEpB,UAAU,CAACoB;EAC9B,CAAC;EAEDnC,EAAE,CAACK,KAAK,CAAC,2BAA2B,EAAEc,MAAM,EAAE,CAACb,GAAG,EAAE8B,MAAM,KAAK;IAC7D,IAAI9B,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEH,GAAG,CAAC;MAC5C,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,GAAG,EAAE,wBAAwB;QAAEH,KAAK,EAAEH,GAAG,CAACO;MAAQ,CAAC,CAAC;IACpF;IACAT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,GAAG,EAAE,gBAAgB;MAAEM,EAAE,EAAEkB,MAAM,CAACC;IAAS,CAAC,CAAC;EACtE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGzC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// routes/auth.js\nconst express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst db = require('../db'); // adjust path to your MySQL connection\n\n// Login route\nrouter.post('/login', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  console.log('Login attempt for:', username);\n  db.query('SELECT * FROM users WHERE username = ?', [username], (err, results) => {\n    if (err) {\n      console.error('DB Error:', err);\n      return res.status(500).json({\n        msg: 'Server error'\n      });\n    }\n    if (!results.length) {\n      console.log('User not found in DB');\n      return res.status(400).json({\n        msg: 'User not found'\n      });\n    }\n    const user = results[0];\n    console.log('User found:', user.username);\n    bcrypt.compare(password, user.password, (err, isMatch) => {\n      if (err) {\n        console.error('Bcrypt compare error:', err);\n        return res.status(500).json({\n          msg: 'Error checking password'\n        });\n      }\n      if (!isMatch) {\n        console.log('Password mismatch');\n        return res.status(400).json({\n          msg: 'Invalid credentials'\n        });\n      }\n      const token = jwt.sign({\n        id: user.id,\n        role: user.role\n      }, process.env.JWT_SECRET, {\n        expiresIn: '1h'\n      });\n      console.log('Login successful. Token generated.');\n      res.json({\n        token,\n        role: user.role\n      });\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","bcrypt","jwt","db","post","req","res","username","password","body","console","log","query","err","results","error","status","json","msg","length","user","compare","isMatch","token","sign","id","role","process","env","JWT_SECRET","expiresIn","module","exports"],"sources":["C:/Users/Tech Semiconductors/luct-reporting-system/frontend/src/components/Login.js"],"sourcesContent":["// routes/auth.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst db = require('../db'); // adjust path to your MySQL connection\r\n\r\n// Login route\r\nrouter.post('/login', (req, res) => {\r\n  const { username, password } = req.body;\r\n  console.log('Login attempt for:', username);\r\n\r\n  db.query('SELECT * FROM users WHERE username = ?', [username], (err, results) => {\r\n    if (err) {\r\n      console.error('DB Error:', err);\r\n      return res.status(500).json({ msg: 'Server error' });\r\n    }\r\n\r\n    if (!results.length) {\r\n      console.log('User not found in DB');\r\n      return res.status(400).json({ msg: 'User not found' });\r\n    }\r\n\r\n    const user = results[0];\r\n    console.log('User found:', user.username);\r\n\r\n    bcrypt.compare(password, user.password, (err, isMatch) => {\r\n      if (err) {\r\n        console.error('Bcrypt compare error:', err);\r\n        return res.status(500).json({ msg: 'Error checking password' });\r\n      }\r\n\r\n      if (!isMatch) {\r\n        console.log('Password mismatch');\r\n        return res.status(400).json({ msg: 'Invalid credentials' });\r\n      }\r\n\r\n      const token = jwt.sign(\r\n        { id: user.id, role: user.role },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: '1h' }\r\n      );\r\n\r\n      console.log('Login successful. Token generated.');\r\n      res.json({ token, role: user.role });\r\n    });\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMK,EAAE,GAAGL,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE7B;AACAC,MAAM,CAACK,IAAI,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EACvCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,QAAQ,CAAC;EAE3CJ,EAAE,CAACS,KAAK,CAAC,wCAAwC,EAAE,CAACL,QAAQ,CAAC,EAAE,CAACM,GAAG,EAAEC,OAAO,KAAK;IAC/E,IAAID,GAAG,EAAE;MACPH,OAAO,CAACK,KAAK,CAAC,WAAW,EAAEF,GAAG,CAAC;MAC/B,OAAOP,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,GAAG,EAAE;MAAe,CAAC,CAAC;IACtD;IAEA,IAAI,CAACJ,OAAO,CAACK,MAAM,EAAE;MACnBT,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,OAAOL,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,GAAG,EAAE;MAAiB,CAAC,CAAC;IACxD;IAEA,MAAME,IAAI,GAAGN,OAAO,CAAC,CAAC,CAAC;IACvBJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAES,IAAI,CAACb,QAAQ,CAAC;IAEzCN,MAAM,CAACoB,OAAO,CAACb,QAAQ,EAAEY,IAAI,CAACZ,QAAQ,EAAE,CAACK,GAAG,EAAES,OAAO,KAAK;MACxD,IAAIT,GAAG,EAAE;QACPH,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;QAC3C,OAAOP,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,GAAG,EAAE;QAA0B,CAAC,CAAC;MACjE;MAEA,IAAI,CAACI,OAAO,EAAE;QACZZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,OAAOL,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,GAAG,EAAE;QAAsB,CAAC,CAAC;MAC7D;MAEA,MAAMK,KAAK,GAAGrB,GAAG,CAACsB,IAAI,CACpB;QAAEC,EAAE,EAAEL,IAAI,CAACK,EAAE;QAAEC,IAAI,EAAEN,IAAI,CAACM;MAAK,CAAC,EAChCC,OAAO,CAACC,GAAG,CAACC,UAAU,EACtB;QAAEC,SAAS,EAAE;MAAK,CACpB,CAAC;MAEDpB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDL,GAAG,CAACW,IAAI,CAAC;QAAEM,KAAK;QAAEG,IAAI,EAAEN,IAAI,CAACM;MAAK,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAGjC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}